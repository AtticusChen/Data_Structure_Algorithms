"""
                                数组Array：连续的内存空间，存储一组相同数据类型的元素
                                    特点： 适合读，不适合写-->读多写少
区分：
     元素     [1,2,3]                                     数组访问（Access） a[0] --> 1 通过索引访问
     索引      1-->0  2-->1  3-->2                        数组搜索（Search） 查看此数组中是否存在 1
=============================================================================================
数组        时间复杂度         n代表数组长度 ，考虑最坏的情况
    访问      O(1)
    搜索      O(n)
    插入      O(n)
    删除      O(n)
"""
# 创建数组
a = []
# 添加元素
a.append(1)     # 时间复杂度 O（1）
a.append(2)     # 时间复杂度 O（1）
a.append(3)     # 时间复杂度 O（1）
# [1,2,3]
a.insert(2,99)  # 时间复杂度 O（N）
# [1,2,99,3]  因为a这个数组在下标2有元素，没办法进行添加了，那么需要从新在内存中开辟一个地址，将[1,2]重新拿下来然后将索引下标2改为99，再将3放进去

# 访问元素
temp = a[2]     # 时间复杂度 O（1）
# 99  用索引（下标）访问元素

# 更新元素
a[2] = 88       # 时间复杂度 O（1）
# [1,2,88,3]

# 删除元素 3种方法
a.remove(88)   # 时间复杂度 O（N）
# [1,2,3]  遍历所有数据，找到对应的值然后删除
a.pop(1)       # 时间复杂度 O（N）
#[1,3]  a.pop(1)
a.pop()     # 时间复杂度 O（1）
# 删除最后一个元素

# 获取数组的长度
size = len(a)

# 遍历数组 3种
for i in a:
    pass
# enumerate 函数 返回两个值，一个是索引位置，一个是值
for index,element in enumerate(a):
    print(index,element)
for i in range(0,len(a)):
    print(i,a[i])

# 查找某个元素
index = a.insert(2)   #2代表元素

# 数组排序       排序时间复杂度 （NlogN）
a = [3,1,2,5,4,6]
a.sort()
# [1,2,3,4,5,6]
a.sort(reverse=True)  # 倒序